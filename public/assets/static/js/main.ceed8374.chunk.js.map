{"version":3,"sources":["components/Confirmation.js","components/Form.js","components/App.js","serviceWorker.js","index.js"],"names":["Confirmation","props","state","value","handleChange","bind","postRegistration","event","this","setState","target","alert","first","registrationData","last","address","address1","address2","city","zip","country","marshaled","JSON","stringify","fetch","method","body","then","response","json","data","console","log","catch","error","className","onClick","undo","React","Component","requiredValidator","field","input","Form","firstValue","lastValue","address1Value","address2Value","cityValue","stateValue","zipValue","countryValue","firstFeedback","lastFeedback","address1Feedback","cityFeedback","stateFeedback","zipFeedback","countryFeedback","firstIsValid","lastIsValid","address1IsValid","cityIsValid","stateIsValid","zipIsValid","countryIsValid","confirming","submitting","submitted","handleSubmit","handleFirstChange","handleLastChange","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleZipChange","handleCountryChange","handleUndoConfirm","test","zipValidator","setTimeout","preventDefault","onSubmit","text","onChange","nameFeedback","type","App","page","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ceed8374.chunk.js","sourcesContent":["import React from 'react'\n\nclass Confirmation extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { value: '' }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.postRegistration = this.postRegistration.bind(this)\n  }\n  handleChange(event) {\n    this.setState({ value: event.target.value })\n  }\n  postRegistration() {\n    alert(this.props.first)\n    let registrationData = {\n      first: this.props.first,\n      last: this.props.last,\n      address: this.props.address1,\n      address2: this.props.address2,\n      city: this.props.city,\n      state: this.props.state,\n      zip: this.props.zip,\n      country: this.props.country\n    }\n    let marshaled = JSON.stringify(registrationData)\n    fetch('http://127.0.0.1:3000/register', {\n      method: 'post',\n      body: marshaled\n    })\n      .then(function(response) {\n        return response.json()\n      })\n      .then(function(data) {\n        console.log(data)\n      })\n      .catch(function(error) {\n        console.log(error)\n      })\n  }\n\n  render(props) {\n    return (\n      <div className=\"card\">\n        <div className=\"row\">\n          <span>First: </span>\n          <span>{this.props.first}</span>\n        </div>\n        <div className=\"row\">\n          <span>Last: </span>\n          <span>{this.props.last}</span>\n        </div>\n        <div className=\"row\">\n          <span>Address 1: </span>\n          <span>{this.props.address1}</span>\n        </div>\n        <div className=\"row\">\n          <span>Address 2: </span>\n          <span>{this.props.address2}</span>\n        </div>\n        <div className=\"row\">\n          <span>City: </span>\n          <span>{this.props.city}</span>\n        </div>\n        <div className=\"row\">\n          <span>State: </span>\n          <spam>{this.props.state}</spam>\n        </div>\n        <div className=\"row\">\n          <span>Zip: </span>\n          <spam>{this.props.zip}</spam>\n        </div>\n        <div className=\"row\">\n          <span>Country: </span>\n          <spam>{this.props.country}</spam>\n        </div>\n        <button\n          className=\"form-button\"\n          onClick={() => {\n            this.props.undo()\n          }}\n        >\n          Edit\n        </button>\n        <button className=\"form-button\" onClick={() => this.postRegistration()}>\n          Register\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Confirmation\n","import React from 'react'\nimport Confirmation from './Confirmation.js'\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      firstValue: '',\n      lastValue: '',\n      address1Value: '',\n      address2Value: '',\n      cityValue: '',\n      stateValue: '',\n      zipValue: '',\n      countryValue: '',\n      firstFeedback: '',\n      lastFeedback: '',\n      address1Feedback: '',\n      cityFeedback: '',\n      stateFeedback: '',\n      zipFeedback: '',\n      countryFeedback: '',\n      firstIsValid: false,\n      lastIsValid: false,\n      address1IsValid: false,\n      cityIsValid: false,\n      stateIsValid: false,\n      zipIsValid: false,\n      countryIsValid: false,\n      confirming: false,\n      submitting: false,\n      submitted: false\n    }\n\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleFirstChange = this.handleFirstChange.bind(this)\n    this.handleLastChange = this.handleLastChange.bind(this)\n    this.handleAddress1Change = this.handleAddress1Change.bind(this)\n    this.handleAddress2Change = this.handleAddress2Change.bind(this)\n    this.handleCityChange = this.handleCityChange.bind(this)\n    this.handleStateChange = this.handleStateChange.bind(this)\n    this.handleZipChange = this.handleZipChange.bind(this)\n    this.handleCountryChange = this.handleCountryChange.bind(this)\n    this.handleUndoConfirm = this.handleUndoConfirm.bind(this)\n  }\n  handleSubmit(event) {\n    let firstFeedback = requiredValidator('First', this.state.firstValue)\n    if (firstFeedback === '') {\n      this.setState({ firstFeedback: firstFeedback, firstIsValid: true })\n    } else {\n      this.setState({ firstFeedback: firstFeedback, firstIsValid: false })\n    }\n\n    let lastFeedback = requiredValidator(`Last`, this.state.lastValue)\n    if (lastFeedback === '') {\n      this.setState({ lastFeedback: lastFeedback, lastIsValid: true })\n    } else {\n      this.setState({ lastFeedback: lastFeedback, lastIsValid: false })\n    }\n    let address1Feedback = requiredValidator(\n      `Address 1`,\n      this.state.address1Value\n    )\n    if (address1Feedback === '') {\n      this.setState({\n        address1Feedback: address1Feedback,\n        address1IsValid: true\n      })\n    } else {\n      this.setState({\n        address1Feedback: address1Feedback,\n        address1IsValid: false\n      })\n    }\n    let cityFeedback = requiredValidator('City', this.state.cityValue)\n    if (cityFeedback === '') {\n      this.setState({ cityFeedback: cityFeedback, cityIsValid: true })\n    } else {\n      this.setState({ cityFeedback: cityFeedback, cityIsValid: false })\n    }\n    let stateFeedback = requiredValidator('State', this.state.stateValue)\n    if (stateFeedback === '') {\n      this.setState({ stateFeedback: stateFeedback, stateIsValid: true })\n    } else {\n      this.setState({ stateFeedback: stateFeedback, stateIsValid: false })\n    }\n    let zipFeedback = zipValidator('Zip', this.state.zipValue)\n    if (zipFeedback === '') {\n      this.setState({ zipFeedback: zipFeedback, zipIsValid: true })\n    } else {\n      this.setState({ zipFeedback: zipFeedback, zipIsValid: false })\n    }\n\n    let countryFeedback = requiredValidator('Country', this.state.countryValue)\n    if (countryFeedback === '') {\n      this.setState({\n        countryFeedback: countryFeedback,\n        countryIsValid: true\n      })\n    } else {\n      this.setState({\n        countryFeedback: countryFeedback,\n        countryIsValid: false\n      })\n    }\n\n    setTimeout(() => {\n      if (\n        this.state.firstIsValid === true &&\n        this.state.lastIsValid === true &&\n        this.state.address1IsValid === true &&\n        this.state.cityIsValid === true &&\n        this.state.stateIsValid === true &&\n        this.state.zipIsValid === true &&\n        this.state.countryIsValid === true\n      ) {\n        this.setState({ confirming: true })\n      }\n    }, 1000)\n\n    event.preventDefault()\n  }\n  handleFirstChange(event) {\n    this.setState({ firstValue: event.target.value })\n  }\n  handleLastChange(event) {\n    this.setState({ lastValue: event.target.value })\n  }\n  handleAddress1Change(event) {\n    this.setState({ address1Value: event.target.value })\n  }\n  handleAddress2Change(event) {\n    this.setState({ address2Value: event.target.value })\n  }\n  handleCityChange(event) {\n    this.setState({ cityValue: event.target.value })\n  }\n  handleStateChange(event) {\n    this.setState({ stateValue: event.target.value })\n  }\n  handleZipChange(event) {\n    this.setState({ zipValue: event.target.value })\n  }\n  handleCountryChange(event) {\n    this.setState({ countryValue: event.target.value })\n  }\n  handleUndoConfirm() {\n    this.setState({ confirming: false })\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.confirming && (\n          <Confirmation\n            first={this.state.firstValue}\n            last={this.state.lastValue}\n            address1={this.state.address1Value}\n            address2={this.state.address2Value}\n            city={this.state.cityValue}\n            state={this.state.stateValue}\n            zip={this.state.zipValue}\n            country={this.state.countryValue}\n            undo={this.handleUndoConfirm}\n          />\n        )}\n        {this.state.submitted === true && (\n          <div className=\"card\">\n            <h2>Thank you for registering!</h2>\n          </div>\n        )}\n        {this.state.confirming === false && (\n          <form onSubmit={this.handleSubmit} className={'card'}>\n            <h1>User Registration</h1>\n            <div>\n              <label>\n                <span>First:</span>\n                <input\n                  text={this.state.firstValue}\n                  onChange={this.handleFirstChange}\n                ></input>\n              </label>\n              {this.state.firstFeedback !== '' && (\n                <span className=\"feedback\">{this.state.firstFeedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>Last:</span>\n                <input\n                  text={this.state.lastValue}\n                  onChange={this.handleLastChange}\n                ></input>\n              </label>\n              {this.state.nameFeedback !== '' && (\n                <span className=\"feedback\">{this.state.lastFeedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>Address 1:</span>\n                <input\n                  text={this.state.address1Value}\n                  onChange={this.handleAddress1Change}\n                ></input>\n              </label>\n              {this.state.address1Feedback !== '' && (\n                <span className=\"feedback\">{this.state.address1Feedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>Address 2:</span>\n                <input\n                  text={this.state.address2Value}\n                  onChange={this.handleAddress2Change}\n                ></input>\n              </label>\n            </div>\n            <div>\n              <label>\n                <span>City:</span>\n                <input\n                  text={this.state.cityValue}\n                  onChange={this.handleCityChange}\n                ></input>\n              </label>\n              {this.state.cityFeedback !== '' && (\n                <span className=\"feedback\">{this.state.cityFeedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>State:</span>\n                <select\n                  value={this.state.stateValue}\n                  onChange={this.handleStateChange}\n                >\n                  <option></option>\n                  <option>AL</option>\n                  <option>AK</option>\n                  <option>AZ</option>\n                  <option>AR</option>\n                  <option>CA</option>\n                  <option>CO</option>\n                  <option>CT</option>\n                  <option>DE</option>\n                  <option>FL</option>\n                  <option>GA</option>\n                  <option>HI</option>\n                  <option>ID</option>\n                  <option>IL</option>\n                  <option>IN</option>\n                  <option>IA</option>\n                  <option>KS</option>\n                  <option>KY</option>\n                  <option>LA</option>\n                  <option>ME</option>\n                  <option>MD</option>\n                  <option>MA</option>\n                  <option>MI</option>\n                  <option>MN</option>\n                  <option>MS</option>\n                  <option>MO</option>\n                  <option>MT</option>\n                  <option>NE</option>\n                  <option>NV</option>\n                  <option>NH</option>\n                  <option>NJ</option>\n                  <option>NM</option>\n                  <option>NY</option>\n                  <option>NC</option>\n                  <option>ND</option>\n                  <option>OH</option>\n                  <option>OK</option>\n                  <option>OR</option>\n                  <option>PA</option>\n                  <option>RI</option>\n                  <option>SC</option>\n                  <option>SD</option>\n                  <option>TN</option>\n                  <option>TX</option>\n                  <option>UT</option>\n                  <option>VT</option>\n                  <option>VA</option>\n                  <option>WA</option>\n                  <option>WV</option>\n                  <option>WI</option>\n                  <option>WY</option>\n                </select>\n              </label>\n              {this.state.stateFeedback !== '' && (\n                <span className=\"feedback\">{this.state.stateFeedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>Zip:</span>\n                <input\n                  text={this.state.zipValue}\n                  onChange={this.handleZipChange}\n                ></input>\n              </label>\n              {this.state.zipFeedback !== '' && (\n                <span className=\"feedback\">{this.state.zipFeedback}</span>\n              )}\n            </div>\n            <div>\n              <label>\n                <span>Country:</span>\n                <select\n                  value={this.state.countryValue}\n                  onChange={this.handleCountryChange}\n                >\n                  <option></option>\n                  <option>US</option>\n                </select>\n              </label>\n              {this.state.countryFeedback !== '' && (\n                <span className=\"feedback\">{this.state.countryFeedback}</span>\n              )}\n            </div>\n            <input className=\"form-button\" type=\"submit\" value=\"Review\" />\n          </form>\n        )}\n      </div>\n    )\n  }\n}\n\nfunction requiredValidator(field, input) {\n  if (input === '') {\n    return `${field} is required`\n  }\n  return ''\n}\n\nfunction zipValidator(field, input) {\n  let isValid = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/.test(input)\n  if (isValid) {\n    return ''\n  }\n  return `${field} invalid`\n}\n\nexport default Form\n","import React from 'react'\nimport Form from './Form.js'\n\nimport '../App.css'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { page: 0 }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Form />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}